/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package scala_app5

// object App {
//   def main(args: Array[String]): Unit = {
//     println(greeting())
//   }

//   def greeting(): String = "Hello, world!"
  
// }


import akka.actor.typed.ActorSystem
import akka.actor.typed.scaladsl.Behaviors
import akka.http.scaladsl.Http
import akka.http.scaladsl.model._
import akka.http.scaladsl.server.Directives._
import scala.io.StdIn

object App {

  def main(args: Array[String]): Unit = {

    implicit val system = ActorSystem(Behaviors.empty, "my-system")
    implicit val executionContext = system.executionContext

    val route =
      path("hello") {
        get {
          // complete(HttpEntity(ContentTypes.`text/html(UTF-8)`, "<h1>Say hello to akka-http</h1>"))

              val lines = scala.io.Source.fromFile("/Users/paulhechinger/01Scala/testing_type_freeplane/KRR.md").mkString
    complete(convert_md_to_(lines))
          // complete(testtt())
          
        }
      }

    val bindingFuture = Http().newServerAt("localhost", 8080).bind(route)

    println(s"Server now online. Please navigate to http://localhost:8080/hello\nPress RETURN to stop...")
    StdIn.readLine() // let it run until user presses return
    bindingFuture
      .flatMap(_.unbind()) // trigger unbinding from the port
      .onComplete(_ => system.terminate()) // and shutdown when done
  }



  def testtt() = {
    "dddddd"
  }

  def convert_md_to_(lines: String) = {
    val g = "#.+".r.findAllMatchIn(lines)
    val f = g.toList.map(_.toString)
    //.zipWithIndex

    val output = List()

    for (i <- 0 until f.length) {
        var idx = i + 1 
        var nb_hashtag = f(i).count(_ == '#')
        while((idx < f.length) && (f(idx).count(_ == '#') >= (nb_hashtag + 1))) {
          if (f(idx).count(_ == '#') == (nb_hashtag + 1)) {
            output :+ 
            println(f(i) + " - " + f(idx))

          }
            idx  = idx + 1
        }
    }
    "dddd"
}

}
